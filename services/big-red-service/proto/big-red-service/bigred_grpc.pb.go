// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/bigred.proto

package big_red_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BigRedServiceClient is the client API for BigRedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BigRedServiceClient interface {
	GetBigRed(ctx context.Context, in *GetBigRedRequest, opts ...grpc.CallOption) (*GetBigRedResponse, error)
}

type bigRedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBigRedServiceClient(cc grpc.ClientConnInterface) BigRedServiceClient {
	return &bigRedServiceClient{cc}
}

func (c *bigRedServiceClient) GetBigRed(ctx context.Context, in *GetBigRedRequest, opts ...grpc.CallOption) (*GetBigRedResponse, error) {
	out := new(GetBigRedResponse)
	err := c.cc.Invoke(ctx, "/pb.BigRedService/GetBigRed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BigRedServiceServer is the server API for BigRedService service.
// All implementations must embed UnimplementedBigRedServiceServer
// for forward compatibility
type BigRedServiceServer interface {
	GetBigRed(context.Context, *GetBigRedRequest) (*GetBigRedResponse, error)
	mustEmbedUnimplementedBigRedServiceServer()
}

// UnimplementedBigRedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBigRedServiceServer struct {
}

func (UnimplementedBigRedServiceServer) GetBigRed(context.Context, *GetBigRedRequest) (*GetBigRedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBigRed not implemented")
}
func (UnimplementedBigRedServiceServer) mustEmbedUnimplementedBigRedServiceServer() {}

// UnsafeBigRedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BigRedServiceServer will
// result in compilation errors.
type UnsafeBigRedServiceServer interface {
	mustEmbedUnimplementedBigRedServiceServer()
}

func RegisterBigRedServiceServer(s grpc.ServiceRegistrar, srv BigRedServiceServer) {
	s.RegisterService(&BigRedService_ServiceDesc, srv)
}

func _BigRedService_GetBigRed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBigRedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigRedServiceServer).GetBigRed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigRedService/GetBigRed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigRedServiceServer).GetBigRed(ctx, req.(*GetBigRedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BigRedService_ServiceDesc is the grpc.ServiceDesc for BigRedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BigRedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BigRedService",
	HandlerType: (*BigRedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBigRed",
			Handler:    _BigRedService_GetBigRed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bigred.proto",
}
